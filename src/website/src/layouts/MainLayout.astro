---
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
  ogImage?: string;
}

const { 
  title, 
  description = 'Professional service website',
  ogImage
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    
    <!-- SEO and sharing -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    {ogImage && <meta property="og:image" content={ogImage} />}
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <title>{title}</title>
  </head>
  <body class="min-h-screen bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200 font-sans antialiased">
    <main class="overflow-x-hidden">
      <slot />
    </main>
    
    <!-- Smooth scroll animation -->
    <script>
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const targetId = this.getAttribute('href');
          if (targetId !== "#") {
            document.querySelector(targetId)?.scrollIntoView({
              behavior: 'smooth'
            });
          }
        });
      });
    </script>
    
    <!-- Scroll reveal animations -->
    <script>
      // Handle scroll animations
      document.addEventListener('DOMContentLoaded', () => {
        const scrollElements = document.querySelectorAll(
          '.reveal-on-scroll, .reveal-on-scroll-right, .reveal-on-scroll-left, .reveal-on-scroll-scale'
        );
        
        const elementInView = (el, scrollOffset = 100) => {
          const elementTop = el.getBoundingClientRect().top;
          return (
            elementTop <= 
            (window.innerHeight || document.documentElement.clientHeight) - scrollOffset
          );
        };
        
        const displayScrollElement = (element) => {
          element.classList.add('is-visible');
        };
        
        const hideScrollElement = (element) => {
          element.classList.remove('is-visible');
        };
        
        const handleScrollAnimation = () => {
          scrollElements.forEach((el) => {
            if (elementInView(el, 100)) {
              displayScrollElement(el);
            } else {
              // Only hide elements if they're meant to repeat the animation
              if (el.dataset.animateOnce !== 'true') {
                hideScrollElement(el);
              }
            }
          });
        };
        
        // Initialize elements that are already in view
        handleScrollAnimation();
        
        // Add scroll event listener
        window.addEventListener('scroll', () => {
          handleScrollAnimation();
        });
        
        // Also trigger on resize for responsive layouts
        window.addEventListener('resize', () => {
          handleScrollAnimation();
        });
      });
      
      // Trigger animations on viewable elements on load
      window.addEventListener('load', () => {
        // Add small delay for elements to paint before animation
        setTimeout(() => {
          document.querySelectorAll('.reveal-on-scroll, .reveal-on-scroll-right, .reveal-on-scroll-left, .reveal-on-scroll-scale').forEach(el => {
            const rect = el.getBoundingClientRect();
            if (rect.top < window.innerHeight) {
              el.classList.add('is-visible');
            }
          });
        }, 100);
      });
    </script>
  </body>
</html>
